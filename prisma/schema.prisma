// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(cuid())
  email    String    @unique
  username String    @unique
  password Password?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image UserImage?

  roles       Role[]
  sessions    Session[]
  connections Connection[]
  teacher     Teacher?
  student     Student?
  admin       Admin?
}

model Admin {
  id   String @id @default(cuid())
  name String

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Teacher {
  id          String  @id @default(cuid())
  name        String
  instruments String
  bio         String?

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String? @unique

  songComments SongComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  students Student[]
  bands    Band[]
}

model Student {
  id         String        @id @default(cuid())
  name       String
  dob        DateTime
  instrument String
  image      StudentImage?

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String? @unique

  teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId String

  songs        Song[]
  songComments SongComment[]

  band   Band?   @relation(fields: [bandId], references: [id])
  bandId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Band {
  id       String @id @default(cuid())
  name     String
  ageGroup String
  schedule String

  students Student[]
  teachers Teacher[]
  setlists Setlist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Setlist {
  id    String @id @default(cuid())
  theme String

  band     Band   @relation(fields: [bandId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bandId   String
  season   Season @relation(fields: [seasonId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  seasonId String

  songs Song[]
}

model Song {
  id          String  @id @default(cuid())
  title       String
  artist      String
  description String?
  key         String?
  bpm         String?
  lyrics      String?

  setlists Setlist[]
  comments SongComment[]
  students Student[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Season {
  id          String    @id @default(cuid())
  startDate   DateTime
  endDate     DateTime?
  concertDate DateTime?

  setlists Setlist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SongComment {
  id       String    @id @default(cuid())
  content  String
  mentions Student[]

  author   Teacher @relation(fields: [authorId], references: [id])
  authorId String
  song     Song    @relation(fields: [songId], references: [id])
  songId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // This helps our order by in the user search a LOT
  @@index([updatedAt])
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model StudentImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId String  @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}
